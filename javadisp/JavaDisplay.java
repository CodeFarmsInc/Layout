// ------------------------------------------------------------------------
// This is the evolution of the Java code which will be envetually used
// for the display of the UML diagrams.
//                                        Jiri Soukup, Jan.1 2005
// ------------------------------------------------------------------------

import java.io.*;
import java.util.*;
import java.util.List;

import javax.swing.DebugGraphics;

import java.awt.*;
import java.awt.RenderingHints.Key;
import java.awt.event.ComponentEvent;
import java.awt.event.ComponentListener;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.awt.font.FontRenderContext;
import java.awt.font.GlyphVector;
import java.awt.geom.AffineTransform;
import java.awt.image.BufferedImage;
import java.awt.image.BufferedImageOp;
import java.awt.image.ImageObserver;
import java.awt.image.RenderedImage;
import java.awt.image.renderable.RenderableImage;
import java.math.*;
import java.text.AttributedCharacterIterator;

class JavaDisplay extends Canvas {
    private DataInput inp; // display.log file generated by the layout program
    private int arrowSz; // size of the arrow denoting uni-directional associations
    private int inherSz; // size of the rectangle denoting inheritance
    private int xScreen,yScreen;
    private int cfSz,afSz;
    private Font cf,af;
    private FontMetrics cfm,afm;
    private String title;
    private Graphics gr;
    private ArrayList<String[]> layout;

    public JavaDisplay(DataInput dInp){
        int k;
        String iLine;
        StringTokenizer tok;
        String[] tokens=new String[6];

        // read the first record from inp, get screen dimension and fonts
        try {
            inp=dInp;
            // ........................
            iLine=inp.readLine();
            if(iLine==null){
                System.out.println("error: empty input file");
                System.exit(1);
            }
            title=new String(iLine);
            // ........................
            iLine=inp.readLine();
            if(iLine==null){
                System.out.println("error: empty input file");
                System.exit(1);
            }

            tok=new StringTokenizer(iLine);
            if(tok==null || tok.countTokens()<5){
                System.out.println("input error: " + iLine);
            }
            for(k=0; k<5; k++){ // all lines have at least 5 tokens
               tokens[k]=tok.nextToken();
            }

            if(!tokens[0].equals("A")){
                System.out.println(
                    "input error, first line not of type A");
                return;
            }
            readLayout();
            
            xScreen=Integer.parseInt(tokens[1]);
            yScreen=Integer.parseInt(tokens[2]);
            cfSz=Integer.parseInt(tokens[3]);
            afSz=Integer.parseInt(tokens[4]);

            cf=new Font("Courier",Font.BOLD,cfSz);
            af=new Font("Courier",Font.PLAIN,afSz);

            // members which will be set in graphics()
            cfm=afm=null;
            arrowSz=inherSz=0;
            
            setForeground(Color.black);
            setBackground(Color.white);
        }
        catch(Exception e){
          e.printStackTrace();
          System.exit(1);
        }
    }

    public int getXscreen(){return xScreen;}
    public int getYscreen(){return yScreen;}

    public boolean handleEvent(Event e) {
        if(e.id == Event.WINDOW_DESTROY) System.exit(0);
        return super.handleEvent(e);
    }
    

    // ------------------------------------------------------
    // Display a line, possibly with a special arrow:
    // arrow=0 ... no arrow
    // arrow=1 ... arrow at x2,y2
    // arrow=2 ... inheritance sign assuming the base class at x2,y2
    // The lines representing inheritance have larger thickness.
//??? later replace line format
    // GraphicsUtil.drawLine(g,x1,y1,x2,y2,w,Color.black);
    // ------------------------------------------------------
    private void line(int x1,int y1,int x2,int y2,int arrow){ 
        double x,y,xx,yy,xe,ye,d;
        int w; // width of the line
        if(arrow==2)w=3; else w=2;

        if(arrow<=1)
        {
        	if (arrow < 0)
        	{
        		Graphics2D g2d = (Graphics2D)gr.create();
        		Stroke dashed = new BasicStroke(1, BasicStroke.CAP_BUTT, BasicStroke.JOIN_BEVEL, 0, new float[]{5}, 0);
        		g2d.setStroke(dashed);
        		g2d.drawLine(x1, y1, x2, y2);
        		g2d.dispose();
        	}
        	else
        	{
        		gr.drawLine(x1,y1,x2,y2);
        	}
        }
        if(arrow==0)return;
        x=x1-x2; y=y1-y2;
        d=Math.pow(x*x+y*y,0.5);
        x=x/d; y=y/d;

        if(arrow==1){  // draw the arrow
            xx=arrowSz*(x*0.866+y*0.5); // using cos and sin of 30-degrees 
            yy=arrowSz*(y*0.866-x*0.5);
            gr.drawLine(x2,y2,(int)(x2+xx),(int)(y2+yy));
            xx=arrowSz*(x*0.866-y*0.5); // using cos and sin of 30-degrees 
            yy=arrowSz*(y*0.866+x*0.5);
            gr.drawLine(x2,y2,(int)(x2+xx),(int)(y2+yy));
        }
        if(arrow==2){
            x=x*inherSz;
            y=y*inherSz;
            Polygon p=new Polygon();
            p.addPoint(x1,y1);

            xe=x2+x*0.866; 
            ye=y2+y*0.866;
            p.addPoint((int)xe,(int)ye);

            // 1/2 distance at +90-degrees
            xx=xe+0.5*y;
            yy=ye-0.5*x;
            p.addPoint((int)xx,(int)yy);

            // traget point is the tip of the arrow
            p.addPoint((int)x2,(int)y2);

            // 1/2 distance at -90-degrees
            xx=xe-0.5*y;
            yy=ye+0.5*x;
            p.addPoint((int)xx,(int)yy);

            // back to the starting point
            p.addPoint((int)xe,(int)ye);

            gr.drawPolygon(p);
        }
    }
    
    public String getTitle()
    {
    	return title;
    }
    
    // ------------------------------------------------------
    // ??? potential improvement draw 4 thicker lines
    // ------------------------------------------------------
    private void box(int x1,int y1,int x2,int y2){
        gr.drawRect(x1,y1,x2-x1,y2-y1);
    }

    private void text(int x,int y,String text,int fontSz){
        int i,sz;

        if(fontSz==cfSz)gr.setFont(cf);
        else            gr.setFont(af);
        gr.drawString(text,x,y);
    }

    private void readLayout()
    {
        int k;
        String iLine;
        StringTokenizer tok;
        String[] tokens;//=new String[6];
        layout = new ArrayList<String[]>();
 
        try 
        {
        	int maxX = 0, maxY = 0;
        	int x, y;
            for(iLine=null;;)
            {
                iLine=inp.readLine();
                	if(iLine==null)
                		break; // end of file
                tok=new StringTokenizer(iLine);
                if(tok==null || tok.countTokens()<5)
                {
                    System.out.println("input error: " + iLine);
                    //throw new Exception("Invalid layout format.");
                    continue;
                }
                tokens=new String[6];
                for(k=0; k<5; k++)
                { // all lines have at least 5 tokens
                    tokens[k]=tok.nextToken();
                    if (tokens[0].equals("L") && k == 4)
                    	tokens[k+1] = tok.nextToken();//one more token
                }
                
                if(tokens[0].equals("B")){
                    x=Integer.parseInt(tokens[3]);
                    y=Integer.parseInt(tokens[4]);
                    if (x > maxX) maxX = x;
                    if (y > maxY) maxY = y;
                }
                else if(tokens[0].equals("L")){
                	x=Integer.parseInt(tokens[3]);
                    y=Integer.parseInt(tokens[4]);
                    if (x > maxX) maxX = x;
                    if (y > maxY) maxY = y;
                }
                layout.add(tokens);
            }
            setSize(new Dimension((int)(maxX*1.2), (int)(maxY*1.2)));
        } 
        catch(Exception e){
          e.printStackTrace();
          System.exit(1);
        }
    }
    
    // ------------------------------------------------------------
    // Skip the first record from the input file, read the 
    // remaining records and display the graphics.
    // [The "fileName" and "area" records have been already 
    //  read by the constructor.]
    //
    // fileName
    // area: A x1 y1 x2 y2 cFont aFont ... must be the first record
    // box:  B x1 y1 x2 y2             ... default for line width
    // line: L x1 y1 x2 y2 arrow       ... arrow also implies width
    // text: x y textString font       ... font must be cFont or aFont
    // 
    // cFont (typically the larger one) is for class names (BOLD)
    // aFont is for association labels (REGULAR)
    // Text "-" is considered as no name, and is not printed
    // ------------------------------------------------------------
    public void paint(Graphics g){
        int k,arrowFlg;
        String[] tokens;
        int x1,y1,x2,y2,font;
 
        try {
            gr=g;

            if(cfm==null){
                cfm=gr.getFontMetrics(cf);
                afm=gr.getFontMetrics(af);
                arrowSz=afm.stringWidth("v");
                inherSz=2*cfm.stringWidth("v");
            }
            
            for (int i = 0; i < layout.size(); i++)
            {
            	tokens = layout.get(i);

                if(tokens[0].equals("B")){
                    x1=Integer.parseInt(tokens[1]);
                    y1=Integer.parseInt(tokens[2]);
                    x2=Integer.parseInt(tokens[3]);
                    y2=Integer.parseInt(tokens[4]);
                    box(x1,y1,x2,y2);
                }
                else if(tokens[0].equals("T")){
                    x1=Integer.parseInt(tokens[1]);
                    y1=Integer.parseInt(tokens[2]);
                    font=Integer.parseInt(tokens[4]);

                    if(font==cfSz)g.setFont(cf);
                    else          g.setFont(af);
                    if(!(tokens[3].equals("-"))){
                        text(x1,y1,tokens[3],font);
                    }
                }
                else if(tokens[0].equals("L")){
                    x1=Integer.parseInt(tokens[1]);
                    y1=Integer.parseInt(tokens[2]);
                    x2=Integer.parseInt(tokens[3]);
                    y2=Integer.parseInt(tokens[4]);
                    arrowFlg=Integer.parseInt(tokens[5]);
                    line(x1,y1,x2,y2,arrowFlg);
                }
                else {
                    System.out.println("input error: neither 'B' nor 'T' " +
                                   "nor 'L' record type:\n" + i+2);
               }
            }
        } 
        catch(Exception e){
          e.printStackTrace();
          System.exit(1);
        }
    }

    public static void main(String[] args) {
        int xFrame,yFrame;

        try {
            if(args.length==0){
                System.out.println("Syntax: java JavaDisplay inputFileName");
                return;
            }
            DataInput dInp=new DataInputStream(new FileInputStream(args[0]));
            if(dInp==null)
            {
                System.out.println("problem to open file=" + args[0]);
                System.exit(1);
            }
            
            JavaDisplay jd=new JavaDisplay(dInp);
            
            final Frame frame = new Frame();
            frame.setTitle(jd.getTitle());
            frame.addWindowListener(new WindowAdapter() {
            	public void windowClosing(WindowEvent e){frame.dispose();}
			});            
            
            final ScrollPane pane = new ScrollPane(ScrollPane.SCROLLBARS_AS_NEEDED);
            frame.add(pane);
            pane.add(jd);
            
            //xFrame=jd.getXscreen();
            //yFrame=jd.getYscreen();
            Dimension d = jd.getSize();
            if (d.getWidth() > 1600)
            	d.setSize(1600, d.getHeight());
            if (d.getHeight() > 1200)
            	d.setSize(d.getWidth(), 1200);
            frame.resize(d);
            frame.show();
        }
        catch(Exception e){
          e.printStackTrace();
          System.exit(1);
        }
    }
}
/* special utility not used now 
  public static void drawLine(Graphics g,
                              int x1, int y1,
                              int x2, int y2,
                              int lineWidth) {
    if (lineWidth == 1)
      g.drawLine(x1, y1, x2, y2);
    else {
      double angle;
      double halfWidth = ((double)lineWidth)/2.0;
      double deltaX = (double)(x2 - x1);
      double deltaY = (double)(y2 - y1);
      if (x1 == x2)
	angle=Math.PI;
      else
	angle=Math.atan(deltaY/deltaX)+Math.PI/2;
      int xOffset = (int)(halfWidth*Math.cos(angle));
      int yOffset = (int)(halfWidth*Math.sin(angle));
      int[] xCorners = { x1-xOffset, x2-xOffset+1,
			 x2+xOffset+1, x1+xOffset };
      int[] yCorners = { y1-yOffset, y2-yOffset,
			 y2+yOffset+1, y1+yOffset+1 };
      g.fillPolygon(xCorners, yCorners, 4);
    }
  }
*/