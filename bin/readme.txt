DEBUGGING:
Inputs: js=just M_TO_N.
        inpMN= aggregate plus M_TO_N
The horizontal line sometimes doubles...
yet it is recorded as a net, and nodes which are in the net are
processed always as case 2.
????????????????????????????????????????????????????????????????????

This directory contains the source of two programs which help
to display UML diagrams:

    layout.cpp reads layout.inp file produced by the code generator of
               either alib or jlib (both use the same format).
               It generates either an svg file which can be viewed with
               any web browser or special svg tools and/or file layout.log
               which can be displayed with JavaDisplay.
 
    JavaDisplay.java (in directory javadisp) reads the layout.log file and
               produces a window with the UML diagram.

Calling syntax:

    layout [-s] paramFile [inpFile outFile]\n");
        where -s is used for the svg display, no option for the Java display,
              paramFile describes screen parameters, usually param.txt,
              inpFile - file layout.inp produced by alib or jlib code generator,
              outFile - the name of the svg file.

    java JavaDisplay inpFile
        where inpFile is usually file display.log generated by layout.cpp

The two displays are identical, but may differ in speed and in viewing 
utilities such as zoom or print, depending on what additional tools you are
using.

File param.txt describes the parameters of your screen - its dimension and
the font sizes to be used in the UML diagram. This file can be either manually
typed in, or generated by program GenParamFile. 

Files inp* are testing input files (hand/computer generated files in the format
of layout.inp).

For more details on anything related to these programs, see doc/laytutor.doc.

WARNING:
Both layout.cpp and JavaDisplay.java are typical examples
of bad spaghetti code. As usual in such cases, the software design
started as a program which appeared to be simple and straightforward
and which would require simple, if any, data structures. Than, as the project
evolved, the problem of producing an esthetically pleasing diagram
proved difficult, and several different algorithms were gradually introduced,
each with its own sophisticated data structure.

As inevitably happens in such cases, the data organization based on
pointers and arrays implanted in individual classes got out of hand
and the code is hard to read and maintain. As an example of how
the IN_CODE associations can be retrofitted to an existing code, I am planning
to convert the code while keeping the log of time used and of the issues
encountered along the way. 
                                          Jiri Soukup, April 8,2005
=============================================================================
WARNING:
         Program 'layout' is temporarily limited to 1 or 2 participating
         classes per association. Neither of the ManytoMany associations can
         be displayed and when used, the resulting UML diagram is garbled.
         This imitation will be removed soon.
=============================================================================
